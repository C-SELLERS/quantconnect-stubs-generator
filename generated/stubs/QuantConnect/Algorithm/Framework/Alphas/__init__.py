import QuantConnect.Algorithm.Framework
import abc
import enum
import typing


class BasePairsTradingAlphaModel(AlphaModel):
    """
    This alpha model is designed to accept every possible pair combination
    from securities selected by the universe selection model
    This model generates alternating long ratio/short ratio insights emitted as a group
    """


class PearsonCorrelationPairsTradingAlphaModel(BasePairsTradingAlphaModel):
    """
    This alpha model is designed to rank every pair combination by its pearson correlation
    and trade the pair with the hightest correlation
    This model generates alternating long ratio/short ratio insights emitted as a group
    """


class HistoricalReturnsAlphaModel(AlphaModel):
    """
    Alpha model that uses historical returns to create insights
    """


class ConstantAlphaModel(AlphaModel):
    """
    Provides an implementation of IAlphaModel that always returns the same insight for each security
    """


class EmaCrossAlphaModel(AlphaModel):
    """
    Alpha model that uses an EMA cross to create insights
    """


class MacdAlphaModel(AlphaModel):
    """
    Defines a custom alpha model that uses MACD crossovers. The MACD signal line is
    used to generate up/down insights if it's stronger than the bounce threshold.
    If the MACD signal is within the bounce threshold then a flat price insight is returned.
    """


    class SymbolData:
        """
        This class has no documentation.
        """


class RsiAlphaModel(AlphaModel):
    """
    Uses Wilder's RSI to create insights. Using default settings, a cross over below 30 or above 70 will
    trigger a new insight.
    """


class CompositeAlphaModel(AlphaModel):
    """
    Provides an implementation of IAlphaModel that combines multiple alpha
    models into a single alpha model and properly sets each insights 'SourceModel' property.
    """


class AlphaModelExtensions:
    """
    Provides extension methods for alpha models
    """


class AlphaModelPythonWrapper(AlphaModel):
    """
    Provides an implementation of IAlphaModel that wraps a PyObject object
    """


class AlphaModel(IAlphaModel, INamedModel):
    """
    Provides a base class for alpha models.
    """


class IAlphaModel(QuantConnect.Algorithm.Framework.INotifiedSecurityChanges, metaclass=abc.ABCMeta):
    """
    Algorithm framework model that produces insights
    """


class INamedModel(metaclass=abc.ABCMeta):
    """
    Provides a marker interface allowing models to define their own names.
    If not specified, the framework will use the model's type name.
    Implementation of this is not required unless you plan on running multiple models
    of the same type w/ different parameters.
    """


class NullAlphaModel(AlphaModel):
    """
    Provides a null implementation of an alpha model
    """


class InsightScore:
    """
    Defines the scores given to a particular insight
    """


class IInsightManagerExtension(metaclass=abc.ABCMeta):
    """
    Abstraction point to handle the various concerns from a common api.
    At the time of writing, these concerns are charting, scoring, perisistence and messaging.
    """


class InsightDirection(enum.Enum):
    """
    Specifies the predicted direction for a insight (price/volatility)
    """


class InsightCollection(typing.List[Insight]):
    """
    Provides a collection for managing insights. This type provides collection access semantics
    as well as dictionary access semantics through TryGetValue, ContainsKey, and this[symbol]
    """


class Insight:
    """
    Defines a alpha prediction for a single symbol generated by the algorithm
    """


class GeneratedInsightsCollection:
    """
    Defines a collection of insights that were generated at the same time step
    """


class InsightScoreType(enum.Enum):
    """
    Defines a specific type of score for a insight
    """


class InsightType(enum.Enum):
    """
    Specifies the type of insight
    """


