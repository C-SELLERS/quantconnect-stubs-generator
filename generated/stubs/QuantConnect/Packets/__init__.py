import QuantConnect
import abc
import enum


class Packet:
    """
    Base class for packet messaging system
    """


class PacketType(enum.Enum):
    """
    Classifications of internal packet system
    """


class LiveNodePacket(AlgorithmNodePacket):
    """
    Live job task packet: container for any live specific job variables
    """


class SecurityTypesPacket(Packet):
    """
    Security types packet contains information on the markets the user data has requested.
    """


class LiveResultPacket(Packet):
    """
    Live result packet from a lean engine algorithm.
    """


class LiveResult(QuantConnect.Result):
    """
    Live results object class for packaging live result data.
    """


class LogPacket(Packet):
    """
    Simple log message instruction from the lean engine.
    """


class BaseResultParameters:
    """
    Base parameters used by LiveResultParameters and BacktestResultParameters
    """


class Breakpoint:
    """
    A debugging breakpoint
    """


class SystemDebugPacket(DebugPacket):
    """
    Debug packets generated by Lean
    """


class AlgorithmNodePacket(Packet):
    """
    Algorithm Node Packet is a work task for the Lean Engine
    """


class AlphaNodePacket(LiveNodePacket):
    """
    Alpha job packet
    """


class RuntimeErrorPacket(Packet):
    """
    Algorithm runtime error packet from the lean engine.
    This is a managed error which stops the algorithm execution.
    """


class BacktestNodePacket(AlgorithmNodePacket):
    """
    Algorithm backtest task information packet.
    """


class DebugPacket(Packet):
    """
    Send a simple debug message from the users algorithm to the console.
    """


class HandledErrorPacket(Packet):
    """
    Algorithm runtime error packet from the lean engine.
    This is a managed error which stops the algorithm execution.
    """


class OrderEventPacket(Packet):
    """
    Order event packet for passing updates on the state of an order to the portfolio.
    """


class LiveResultParameters(BaseResultParameters):
    """
    Defines the parameters for LiveResult
    """


class Controls:
    """
    Specifies values used to control algorithm limits
    """


class LeakyBucketControlParameters:
    """
    Provides parameters that control the behavior of a leaky bucket rate limiting algorithm. The
    parameter names below are phrased in the positive, such that the bucket is filled up over time
    vs leaking out over time.
    """


class MarketToday:
    """
    Market today information class
    """


class MarketHours:
    """
    Market open hours model for pre, normal and post market hour definitions.
    """


class AlphaResultPacket(Packet):
    """
    Provides a packet type for transmitting alpha insights data
    """


class AlgorithmStatusPacket(Packet):
    """
    Algorithm status update information packet
    """


class HistoryPacket(Packet):
    """
    Packet for history jobs
    """


class HistoryRequest:
    """
    Specifies request parameters for a single historical request.
    A HistoryPacket is made of multiple requests for data. These
    are used to request data during live mode from a data server
    """


class HistoryResultType(enum.Enum):
    """
    Specifies various types of history results
    """


class HistoryResult(metaclass=abc.ABCMeta):
    """
    Provides a container for results from history requests. This contains
    the file path relative to the /Data folder where the data can be written
    """


class FileHistoryResult(HistoryResult):
    """
    Defines requested file data for a history request
    """


class CompletedHistoryResult(HistoryResult):
    """
    Specifies the completed message from a history result
    """


class ErrorHistoryResult(HistoryResult):
    """
    Specfies an error message in a history result
    """


class StatusHistoryResult(HistoryResult):
    """
    Specifies the progress of a request
    """


class BacktestResultParameters(BaseResultParameters):
    """
    Defines the parameters for BacktestResult
    """


class BacktestResultPacket(Packet):
    """
    Backtest result packet: send backtest information to GUI for user consumption.
    """


class BacktestResult(QuantConnect.Result):
    """
    Backtest results object class - result specific items from the packet.
    """


